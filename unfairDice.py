# --------------------------------
# Name: Celine Fong
# ID: 1580124
# CMPUT 274, Fall 2019
#
# Weekly Assignment 2: Unfair Dice
# --------------------------------

import random


def biased_rolls(prob_list, s, n): 
    """ Simulate n rolls of a biased m-sided die and return
    a list containing the results. 

    Arguments:
        prob_list: a list of the probabilities of rolling the 
                   number on each side of the m-sided die. The list  
                   will always have the length m (m >= 2), where m is 
                   the number of sides numbered 1 to m. Therefore,  
                   for example, the probability stored at index 0 in 
                   the list is the probability of rolling a 1 on
                   the m-sided die.
        s: the seed to use when initializing the PRNG
        n: the number of rolls to return

    Return:
        rolls: a list (of length n) containing each of the n rolls of the 
               biased die, in the order they were generated.
    """

    # set the random seed to s
    random.seed(s)


    # initialize variables
    map_list = [0]
    sum_prob = 0

    # create a list for mapping probabilities
    for probability in prob_list:
    	sum_prob += probability
    	map_list.append(sum_prob)

    # initialize variables
    k = 0
    rolls = []

    # generate n rolls of the dice
    while k < n:
    	# generate a new random number between 0.0 and 1.0 each roll
    	rand_num = random.random()

    	# initialize variables
    	found_yet = False
    	j = 0

    	# check which mapping region rand_num belongs to and append it to rolls
    	while j < len(prob_list) and not found_yet:
    		if rand_num >= map_list[j] and rand_num < map_list[j+1]:
    			rolls.append(j+1) # j+1 is equal to the dice value the rand_num maps to
    			found_yet = True
    		else:
    			j += 1
    	k += 1

    # return the resulting rolls
    return rolls


def draw_histogram(m, rolls, width):
    """ Draws a frequency histogram of the rolls of an m-sided die
    mapped to a fixed width.

    Arguments: 
        m (int): the number of sides on the die
        rolls (list): the list of rolls generated by the biased die
        width (int): the fixed width of the histogram, in characters
                     (this is the length of the longest bar in the 
                     histogram, to maximize space in the chart)

    Returns:
        None (but prints the histogram to standard output)
    """

    # initialize variables
    i = 1
    stars_raw = []

    # iterate through rolls to count how many times each outcome occurs
    while i <= m:
    	num_occurences = rolls.count(i)
    	stars_raw.append(num_occurences)
    	i += 1

    # check for maximum number of occurences
    max_occurences = max(stars_raw)

    # initialize variables
    stars_adjusted = []
    num_periods = []

    # use for loop to adjust number of stars for each outcome accordingly
    for outcome in stars_raw:
    	adjusted = round(outcome * width/max_occurences)
    	stars_adjusted.append(adjusted)
    	num_periods.append(width-adjusted)

    # output the title
    print('Frequency Histogram: {}-sided Die'.format(m))

    # initialize variables
    j = 0

    # format the histogram
    while j < m:
    	print('{}:'.format(j+1) + '*'*stars_adjusted[j] + '.'*num_periods[j])
    	j += 1


if __name__ == "__main__":
    # Any code indented under this line will only be run
    # when the program is called directly from the terminal
    # using "python3 unfairDice.py". This can be useful for
    # testing your implementations.
    rolls = biased_rolls([0.9, 0.1], 0, 1)
    print(rolls)
    draw_histogram(2, rolls, 10)
    pass